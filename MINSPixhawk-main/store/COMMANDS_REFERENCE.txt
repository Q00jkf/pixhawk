===============================================
    MINSPixhawk 專案指令參考手冊 - V0
===============================================

📂 工作流程說明
===============================================
主工作檔案: /mnt/c/Users/user/MINSPixhawk/Arduino2PixhawkV0/Arduino2PixhawkV0.ino
備份目錄:   /mnt/c/Users/user/MINSPixhawk/store/
版本管理:   V0 → V1 → V2... (大改變時會建立新版本目錄)

🚀 快速指令清單
===============================================
STORE [name]           - 備份當前版本
STORE_LIST            - 列出所有備份
RESTORE [name]        - 恢復指定備份
COMMIT [message]      - 提交變更到 Git
PUSH                  - 推送到 GitHub
PULL                  - 從 GitHub 拉取更新
RESET_SOFT            - 軟重置（保留修改）
RESET_HARD            - 硬重置（丟棄修改）
STATUS                - 查看 Git 狀態
LOG                   - 查看提交歷史
DIFF                  - 查看變更差異
SAVE_AND_PUSH [msg]   - 一鍵保存並上傳
CHECKPOINT [name]     - 創建檢查點
===============================================

📁 備份存儲指令 (STORE)
===============================================

STORE [name]
  功能：備份當前版本到 store 目錄
  範例：STORE working_uart
  情境：修改串口通訊前先備份能正常運作的版本
  結果：建立 backup_working_uart_20250703_1030/ 目錄

STORE_LIST
  功能：列出所有備份版本
  範例：STORE_LIST
  情境：忘記之前備份了哪些版本
  結果：顯示所有備份清單

RESTORE [name]
  功能：從備份恢復到工作目錄
  範例：RESTORE stable_v1
  情境：修改出問題想回復到之前穩定版本
  結果：將備份內容複製回工作目錄

===============================================
🔄 Git 版本控制指令
===============================================

COMMIT [message]
  功能：提交變更到 Git
  範例：COMMIT "修復時間同步bug"
  情境：完成功能修改，記錄到版本歷史
  結果：將修改記錄到 Git 歷史

PUSH
  功能：推送到 GitHub
  範例：PUSH
  情境：將本地提交上傳到 GitHub 儲存庫
  結果：同步到遠端儲存庫

PULL
  功能：從 GitHub 拉取最新版本
  範例：PULL
  情境：獲取其他人的修改或更新
  結果：下載最新版本到本地

RESET_SOFT
  功能：軟重置到上一個提交（保留變更）
  範例：RESET_SOFT
  情境：提交訊息寫錯想重新整理
  結果：回到上一狀態但修改還在

RESET_HARD
  功能：硬重置到上一個提交（丟棄變更）
  範例：RESET_HARD
  情境：修改有問題想完全回復
  結果：完全回復，所有修改消失

RESET_TO [commit_hash]
  功能：重置到指定提交
  範例：RESET_TO abc1234
  情境：想回復到特定的版本
  結果：回復到指定的提交狀態

STATUS
  功能：查看 Git 狀態
  範例：STATUS
  情境：檢查有哪些檔案被修改
  結果：顯示檔案變更狀態

LOG
  功能：查看提交歷史
  範例：LOG
  情境：查看之前的修改記錄
  結果：顯示提交歷史清單

DIFF
  功能：查看變更差異
  範例：DIFF
  情境：想知道具體修改了什麼
  結果：顯示檔案變更內容

===============================================
🔧 快速操作指令
===============================================

SAVE_AND_PUSH [message]
  功能：一鍵保存並上傳（備份 + 提交 + 推送）
  範例：SAVE_AND_PUSH "新增 NMEA 輸出功能"
  情境：完成功能想快速保存到所有地方
  結果：
    1. 備份到 store/
    2. 提交到 Git
    3. 推送到 GitHub

CHECKPOINT [name]
  功能：創建檢查點（備份 + 提交）
  範例：CHECKPOINT before_sensor_refactor
  情境：大修改前建立安全點
  結果：備份 + Git 提交，建立檢查點

===============================================
📋 命名規則
===============================================

備份命名格式：
- backup_[name]_[YYYYMMDD]_[HHMM]
- 範例：backup_working_uart_20250703_1030

常用名稱建議：
- working：目前工作版本
- stable：穩定可用版本
- test：測試版本
- v1、v2：版本號
- before_[feature]：功能修改前
- after_[feature]：功能修改後

===============================================
⚠️  注意事項
===============================================

1. RESET_HARD 會永久丟失未提交的修改，使用前請確認
2. RESTORE 會覆蓋工作目錄的檔案，建議先備份
3. 備份檔案會佔用磁碟空間，定期清理舊備份
4. Git 操作需要網路連線到 GitHub
5. 指令區分大小寫

===============================================
📞 支援
===============================================

如需協助或有其他需求，請告知 Claude 助手。

最後更新：2025-07-03
版本：1.0
===============================================